#!/bin/bash

# Script de configuration pour le projet Event Ticket SaaS
# Ce script facilite la mise en place et le test des bases de donn√©es

# Couleurs pour les sorties
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color
BOLD='\033[1m'

# Fonction pour afficher les messages
print_message() {
  echo -e "${BOLD}${2}${1}${NC}"
}

print_success() {
  print_message "$1" "${GREEN}"
}

print_warning() {
  print_message "$1" "${YELLOW}"
}

print_error() {
  print_message "$1" "${RED}"
}

# V√©rifier si Docker est install√©
check_docker() {
  if ! command -v docker &> /dev/null; then
    print_error "Docker n'est pas install√©. Veuillez installer Docker Desktop."
    exit 1
  else
    print_success "‚úÖ Docker est install√©."
  fi

  if ! command -v docker-compose &> /dev/null; then
    print_error "Docker Compose n'est pas install√©. Veuillez installer Docker Desktop."
    exit 1
  else
    print_success "‚úÖ Docker Compose est install√©."
  fi
}

# D√©marrer les conteneurs de base de donn√©es uniquement
start_databases() {
  print_message "\nüöÄ D√©marrage des bases de donn√©es PostgreSQL..." "${YELLOW}"
  
  # D√©marrer uniquement les services de base de donn√©es
  docker-compose up -d users-db events-db tickets-db notifications-db
  
  if [ $? -eq 0 ]; then
    print_success "‚úÖ Les bases de donn√©es ont √©t√© d√©marr√©es avec succ√®s."
  else
    print_error "‚ùå Erreur lors du d√©marrage des bases de donn√©es."
    exit 1
  fi
  
  # Attendre que PostgreSQL soit pr√™t
  print_message "\n‚è≥ Attente du d√©marrage de PostgreSQL..." "${YELLOW}"
  sleep 10
}

# Initialiser les bases de donn√©es
initialize_databases() {
  print_message "\nüîß Initialisation des bases de donn√©es..." "${YELLOW}"
  
  # Ex√©cuter le script SQL dans le conteneur users-db (qui est connect√© √† PostgreSQL)
  docker cp ./db-init.sql users-db:/tmp/db-init.sql
  docker exec -u postgres users-db psql -f /tmp/db-init.sql
  
  if [ $? -eq 0 ]; then
    print_success "‚úÖ Les bases de donn√©es ont √©t√© initialis√©es avec succ√®s."
  else
    print_error "‚ùå Erreur lors de l'initialisation des bases de donn√©es."
    exit 1
  fi
}

# D√©marrer tous les services
start_services() {
  print_message "\nüöÄ D√©marrage de tous les services..." "${YELLOW}"
  
  docker-compose up -d
  
  if [ $? -eq 0 ]; then
    print_success "‚úÖ Tous les services ont √©t√© d√©marr√©s avec succ√®s."
  else
    print_error "‚ùå Erreur lors du d√©marrage des services."
    exit 1
  fi
  
  # Attendre que les services soient pr√™ts
  print_message "\n‚è≥ Attente du d√©marrage des services..." "${YELLOW}"
  sleep 15
}

# Mettre √† l'√©chelle les services
scale_services() {
  print_message "\nüîÑ Mise √† l'√©chelle des microservices..." "${YELLOW}"
  
  # Mise √† l'√©chelle des services cl√©s
  docker-compose up -d --scale users-service=2 --scale events-service=2 --scale tickets-service=2
  
  if [ $? -eq 0 ]; then
    print_success "‚úÖ Les services ont √©t√© mis √† l'√©chelle avec succ√®s."
  else
    print_error "‚ùå Erreur lors de la mise √† l'√©chelle des services."
    return 1
  fi
  
  print_message "\n√âtat actuel des services:" "${YELLOW}"
  docker-compose ps
}

# Tester les connexions
test_connections() {
  print_message "\nüîç Test des connexions aux bases de donn√©es et services..." "${YELLOW}"
  
  # Installer les d√©pendances n√©cessaires pour le script de test
  if ! command -v node &> /dev/null; then
    print_error "Node.js n'est pas install√©. Impossible d'ex√©cuter les tests de connexion."
    return 1
  fi
  
  npm install --no-save pg axios
  
  # Ex√©cuter le script de test
  node connection-test.js
  
  if [ $? -eq 0 ]; then
    print_success "‚úÖ Tous les tests de connexion ont r√©ussi."
  else
    print_error "‚ùå Certains tests de connexion ont √©chou√©. V√©rifiez les logs pour plus de d√©tails."
    return 1
  fi
}

# Afficher le menu
show_menu() {
  print_message "\nüìã Menu:" "${BOLD}"
  print_message "1) Installation compl√®te (BDD + services + tests)" "${BOLD}"
  print_message "2) D√©marrer uniquement les bases de donn√©es" "${BOLD}"
  print_message "3) D√©marrer tous les services" "${BOLD}"
  print_message "4) Mettre √† l'√©chelle les services (load balancing)" "${BOLD}"
  print_message "5) Tester les connexions" "${BOLD}"
  print_message "6) Tout arr√™ter" "${BOLD}"
  print_message "0) Quitter" "${BOLD}"
  
  read -p "Entrez votre choix (0-6): " choice
  
  case $choice in
    1) full_installation ;;
    2) start_databases ;;
    3) start_services ;;
    4) scale_services ;;
    5) test_connections ;;
    6) docker-compose down && print_success "‚úÖ Tous les services ont √©t√© arr√™t√©s." ;;
    0) exit 0 ;;
    *) print_error "Choix invalide. Veuillez r√©essayer." && show_menu ;;
  esac
  
  # Retourner au menu apr√®s l'ex√©cution
  show_menu
}

# Installation compl√®te
full_installation() {
  check_docker
  start_databases
  initialize_databases
  start_services
  test_connections
  
  if [ $? -eq 0 ]; then
    print_message "\n==============================================" "${GREEN}"
    print_message "   üéâ Configuration r√©ussie ! Le syst√®me est pr√™t.   " "${GREEN}"
    print_message "==============================================" "${GREEN}"
    print_message "\nüìã R√©sum√©:" "${BOLD}"
    print_message "   - Services d'API: http://localhost:3000" "${BOLD}"
    print_message "   - Interface d'administration de la BDD: http://localhost:8080" "${BOLD}"
    print_message "   - Service utilisateurs: http://localhost:4001" "${BOLD}"
    print_message "   - Service √©v√©nements: http://localhost:4002" "${BOLD}"
    print_message "   - Service billets: http://localhost:4003" "${BOLD}"
    print_message "   - Service notifications: http://localhost:4004" "${BOLD}"
    print_message "   - Load Balancer: http://localhost:80" "${BOLD}"
    
    # Demander si l'utilisateur souhaite mettre √† l'√©chelle les services
    print_message "\nSouhaitez-vous mettre √† l'√©chelle les services pour le load balancing? (o/n)" "${YELLOW}"
    read -p "" scale_choice
    
    if [[ $scale_choice == "o" || $scale_choice == "O" ]]; then
      scale_services
    fi
  else
    print_message "\n==============================================" "${RED}"
    print_message "   ‚ùå Des probl√®mes ont √©t√© d√©tect√©s lors de la configuration.   " "${RED}"
    print_message "==============================================" "${RED}"
    print_message "\nConsultez les messages d'erreur ci-dessus pour r√©soudre les probl√®mes." "${BOLD}"
  fi
}

# Fonction principale
main() {
  print_message "\n==============================================" "${BOLD}"
  print_message "   Event Ticket SaaS - Script de Configuration   " "${BOLD}"
  print_message "==============================================" "${BOLD}"
  
  # Afficher le menu
  show_menu
}

# Ex√©cuter la fonction principale
main