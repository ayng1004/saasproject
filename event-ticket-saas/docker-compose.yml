version: '3.8'

services:

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "5000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - USERS_SERVICE_URL=http://users-service:4001
      - EVENTS_SERVICE_URL=http://events-service:4002
      - TICKETS_SERVICE_URL=http://tickets-service:4003
      - JWT_SECRET=change_this_in_production
    depends_on:
      - users-service
      - events-service
      - tickets-service
    networks:
      - app-network
    restart: unless-stopped

  # Users Service
  users-service:
    build: ./microservice-users
    volumes:
      - ./microservice-users:/app
    ports:
      - "4001"
    # Supprimez container_name pour permettre la mise à l'échelle
    # container_name: users-service
    environment:
      - NODE_ENV=production
      - PORT=4001
      - DB_HOST=users-db
      - DB_PORT=5432
      - DB_NAME=users_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres_password
      - JWT_SECRET=change_this_in_production
    depends_on:
      - users-db
    networks:
      - app-network
    restart: unless-stopped

  # Events Service
  events-service:
    build: ./microservice-events
    ports:
      - "${EVENTS_SERVICE_PORT:-4002}:4002"
    # Supprimez container_name pour permettre la mise à l'échelle
    # container_name: events-service
    environment:
      - NODE_ENV=production
      - PORT=4002
      - DB_HOST=events-db
      - DB_PORT=5432
      - DB_NAME=events_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres_password
      - JWT_SECRET=change_this_in_production
    depends_on:
      - events-db
    networks:
      - app-network
    restart: unless-stopped

  # Tickets Service
  tickets-service:
    build: ./microservice-tickets
    ports:
      - "${TICKETS_SERVICE_PORT:-4003}:4003"
    # Supprimez container_name pour permettre la mise à l'échelle
    # container_name: tickets-service
    environment:
      - NODE_ENV=production
      - PORT=4003
      - DB_HOST=tickets-db
      - DB_PORT=5432
      - DB_NAME=tickets_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres_password
      - JWT_SECRET=change_this_in_production
      - EVENTS_SERVICE_URL=http://events-service:4002
      - NOTIFICATIONS_SERVICE_URL=http://notifications-service:4004
    depends_on:
      - tickets-db
      - events-service
      - notifications-service
    networks:
      - app-network
    restart: unless-stopped

  # Notifications Service
  notifications-service:
    build: ./microservice-notifications
    ports:
      - "4004:4004"

    container_name: notifications-service
    environment:
      - NODE_ENV=production
      - PORT=4004
      - DB_HOST=notifications-db
      - DB_PORT=5432
      - DB_NAME=notifications_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - notifications-db
      - redis
    networks:
      - app-network
    restart: unless-stopped

  # Users Database
  users-db:
    image: postgres:14
    container_name: users-db
    environment:
      - POSTGRES_DB=users_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres_password
    volumes:
      - users-db-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped

  # Events Database
  events-db:
    image: postgres:14
    container_name: events-db
    environment:
      - POSTGRES_DB=events_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres_password
    volumes:
      - events-db-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped

  # Tickets Database
  tickets-db:
    image: postgres:14
    container_name: tickets-db
    environment:
      - POSTGRES_DB=tickets_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres_password
    volumes:
      - tickets-db-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped

  # Notifications Database
  notifications-db:
    image: postgres:14
    container_name: notifications-db
    environment:
      - POSTGRES_DB=notifications_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres_password
    volumes:
      - notifications-db-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped

  # Redis for notifications queue
  redis:
    image: redis:alpine
    container_name: redis
    networks:
      - app-network
    restart: unless-stopped

  # Adminer for database management (optional)
  adminer:
    image: adminer
    container_name: adminer
    ports:
      - "8080:8080"
    networks:
      - app-network
    restart: unless-stopped
  
  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "3000:3000" # ou 5173 selon CRA ou Vite
    depends_on:
      - api-gateway
    networks:
      - app-network
    command: npm start

  payments-service:
    build: ./payments-service
    ports:
      - "4015:4005" 
    environment:
      - NODE_ENV=production
      - PORT=4005
      - DB_HOST=payments-db
      - DB_PORT=5432
      - DB_NAME=payments_db
      - DB_USER=postgres
      - DB_PASSWORD=postgres_password
    depends_on:
      - payments-db
    networks:
      - app-network
    restart: unless-stopped

  payments-db:
    image: postgres:14
    container_name: payments-db
    environment:
      - POSTGRES_DB=payments_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres_password
    volumes:
      - payments-db-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: unless-stopped




  # Service Nginx Load Balancer
  nginx-lb:
    image: nginx:alpine
    container_name: nginx-lb
    ports:
      - "8081:80"
      - "443:443"  # Pour HTTPS si nécessaire
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - api-gateway
      - users-service
      - events-service
      - tickets-service
      - notifications-service
    networks:
      - app-network
    restart: unless-stopped

  
networks:
  app-network:
    driver: bridge

volumes:
  users-db-data:
  events-db-data:
  tickets-db-data:
  notifications-db-data:
  payments-db-data:
